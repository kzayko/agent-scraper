#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞-—Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import argparse
from datetime import datetime  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime –∑–¥–µ—Å—å
import sys
import json
import os
from pathlib import Path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    parser = argparse.ArgumentParser(
        description='–ê–≥–µ–Ω—Ç-—Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å GigaChat –∏ Qdrant',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py --web                                    # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  python main.py "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏"           # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
  python main.py "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞" --output result.json     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
  python main.py --health                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  python main.py --clear-db                                # –û—á–∏—Å—Ç–∫–∞ –ë–î
        """
    )

    parser.add_argument(
        'query', 
        nargs='?', 
        help='–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    )

    parser.add_argument(
        '--web', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
    )

    parser.add_argument(
        '--output', '-o',
        help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (JSON —Ñ–∞–π–ª)'
    )

    parser.add_argument(
        '--sources', '-s',
        default='sources.xlsx',
        help='–ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: sources.xlsx)'
    )

    parser.add_argument(
        '--health',
        action='store_true',
        help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã'
    )

    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    parser.add_argument(
 	'--clear-db',
    	action='store_true',
    	help='–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î'
    )

    parser.add_argument(
    	'--clear-before-date',
    	help='–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)'
    )
    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
      import logging
      logging.getLogger().setLevel(logging.DEBUG)
    # –û—á–∏—Å—Ç–∫–∞ –ë–î
    if args.clear_db:
      from utils.vector_db import VectorDatabase
      vector_db = VectorDatabase()
      vector_db.clear_collection()
      print("üóëÔ∏è –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")
      sys.exit(0)
    # –û—á–∏—Å—Ç–∫–∞ –ë–î –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if args.clear_before_date:
      from utils.vector_db import VectorDatabase
      vector_db = VectorDatabase()
      vector_db.delete_by_date(args.clear_before_date)
      print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ {args.clear_before_date}")
      sys.exit(0)
    try:
        if args.health:
            run_health_check()
        elif args.web:
            run_web_interface()
        elif args.query:
            run_query_processing(args.query, args.sources, args.output)
        else:
            parser.print_help()

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def run_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")

    try:
        import config
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   - Qdrant URL: {config.QDRANT_URL}")
        print(f"   - GigaChat Username: {config.GIGACHAT_USERNAME}")
        print(f"   - –ö–æ–ª–ª–µ–∫—Ü–∏—è: {config.QDRANT_COLLECTION_NAME}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ GigaChat
        print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat...")
        from langchain_gigachat import GigaChat
        llm = GigaChat(
            user=config.GIGACHAT_USERNAME,
            password=config.GIGACHAT_PASSWORD,
            verify_ssl_certs=config.GIGACHAT_VERIFY_SSL,
            scope=config.GIGACHAT_SCOPE,
            profanity_check=config.GIGACHAT_PROFANITY_CHECK
        )

        test_response = llm.invoke("–ü—Ä–∏–≤–µ—Ç")
        print(f"‚úÖ GigaChat –¥–æ—Å—Ç—É–ø–µ–Ω (–æ—Ç–≤–µ—Ç: {test_response.content[:50]}...)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant
        print("\nüóÉÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant...")
        from utils.vector_db import VectorDatabase
        vector_db = VectorDatabase()
        info = vector_db.get_collection_info()
        print(f"‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"   - –ö–æ–ª–ª–µ–∫—Ü–∏—è: {info.get('name', 'N/A')}")
        print(f"   - –í–µ–∫—Ç–æ—Ä–æ–≤: {info.get('vectors_count', 0)}")
        print(f"   - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {info.get('vector_size', 'N/A')}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        print("\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        if os.path.exists(config.SOURCES_EXCEL_PATH):
            import pandas as pd
            df = pd.read_excel(config.SOURCES_EXCEL_PATH)
            print(f"‚úÖ –§–∞–π–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω ({len(df)} –∑–∞–ø–∏—Å–µ–π)")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config.SOURCES_EXCEL_PATH}")

        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        sys.exit(1)

def run_web_interface():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

    try:
        from app import run_web_app
        run_web_app()
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        sys.exit(1)

def run_query_processing(query: str, sources_file: str, output_file: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {query}")
    print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_file}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if not os.path.exists(sources_file):
            print(f"‚ùå –§–∞–π–ª –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {sources_file}")
            sys.exit(1)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        import config
        config.SOURCES_EXCEL_PATH = sources_file

        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        from agent import get_agent
        agent = get_agent()

        print("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        result = agent.process_query(query)

        if result['status'] == 'success':
            print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result['processed_sources']}")
            print(f"   - –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result['total_documents']}")
            print(f"   - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(result['questions'])}")

            print(f"\nüìù –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
            print("=" * 80)
            print(result['final_report'])
            print("=" * 80)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞
            if args.output:
                output_path = args.output
            else:
                os.makedirs('results', exist_ok=True)
                output_path = f"results/result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            sys.exit(1)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        sys.exit(1)

def save_result_to_file(result: dict, output_file: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)

    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª: {e}")

if __name__ == '__main__':
    main()
